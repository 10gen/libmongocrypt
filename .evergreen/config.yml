# Welcome. Evergreen configuration can be time consuming to modify and test. 
# So each script has a header comment describing how to run it locally.
# 
# Some environment variables are hidden by ${inject_env_from_evergreen}.
# This is set in the evergreen project.
# View this in Evergreen => Projects => libmongocrypt.
#
functions:
  "fetch source":
    - command: git.get_project
      params: {directory: libmongocrypt}
    - command: shell.exec
      params:
        script: |-
          set -o errexit
          chmod u+x libmongocrypt/.evergreen/*.sh
          ./libmongocrypt/.evergreen/print-env-info.sh

  "tar and upload libmongocrypt libraries":
    - command: archive.targz_pack
      params:
        target: libmongocrypt.tar.gz
        source_dir: install/libmongocrypt
        include: [./**]
    - command: s3.put
      params:
        aws_key: '${aws_key}'
        aws_secret: '${aws_secret}'
        remote_file: '${project}/${build_variant}/libmongocrypt.tar.gz'
        bucket: mciuploads
        permissions: public-read
        local_file: 'libmongocrypt.tar.gz'
        content_type: '${content_type|application/x-gzip}'

  "upload logs":
    - command: s3.put
      params:
        aws_key: '${aws_key}'
        aws_secret: '${aws_secret}'
        remote_file: '${project}/${build_variant}/${revision}/${task_name}/${build_id}/mockupcryptd.logs'
        bucket: mciuploads
        permissions: public-read
        local_file: 'mockupcryptd.logs'
        content_type: 'text/plain'

tasks:
- name: build-and-test
  commands:
  - func: "fetch source"
  - command: "shell.exec"
    params:
      script: |-
        eval "${inject_env_from_evergreen}"
        ./libmongocrypt/.evergreen/compile.sh
        ./libmongocrypt/.evergreen/test.sh
        
  - func: "tar and upload libmongocrypt libraries"

post:
  - func: "upload logs"

buildvariants:
- name: ubuntu1604
  display_name: "Ubuntu 16.04"
  run_on: ubuntu1604-test
  tasks:
  - build-and-test
- name: rhel76
  display_name: "RHEL 7.6"
  run_on: rhel76-test
  tasks:
  - build-and-test
- name: macos
  display_name: "macOS 10.14"
  run_on: macos-1014
  tasks:
  - build-and-test